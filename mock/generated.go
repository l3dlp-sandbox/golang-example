// Code generated by MockGen. DO NOT EDIT.
// Source: mock-demo.go

// Package mock_mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockanimal is a mock of animal interface
type Mockanimal struct {
	ctrl     *gomock.Controller
	recorder *MockanimalMockRecorder
}

// MockanimalMockRecorder is the mock recorder for Mockanimal
type MockanimalMockRecorder struct {
	mock *Mockanimal
}

// NewMockanimal creates a new mock instance
func NewMockanimal(ctrl *gomock.Controller) *Mockanimal {
	mock := &Mockanimal{ctrl: ctrl}
	mock.recorder = &MockanimalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockanimal) EXPECT() *MockanimalMockRecorder {
	return m.recorder
}

// run mocks base method
func (m *Mockanimal) run() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "run")
	ret0, _ := ret[0].(bool)
	return ret0
}

// run indicates an expected call of run
func (mr *MockanimalMockRecorder) run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "run", reflect.TypeOf((*Mockanimal)(nil).run))
}

// eat mocks base method
func (m *Mockanimal) eat() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "eat")
	ret0, _ := ret[0].(bool)
	return ret0
}

// eat indicates an expected call of eat
func (mr *MockanimalMockRecorder) eat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "eat", reflect.TypeOf((*Mockanimal)(nil).eat))
}
